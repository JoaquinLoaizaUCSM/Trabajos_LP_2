@startuml
abstract class Empleado {
  #string nombre
  #double salario
  #int fechaContratacion
  +{abstract} double calcularSalario()
  +{abstract} void mostrarDatos()
  +{abstract} void ingresarDatos()
  +{abstract} string serializar()
  +{abstract} void deserializar(string data)
}

class Gerente {
  -double bono
  -string departamento

  +double calcularSalario()
  +void mostrarDatos()
  +void ingresarDatos()
  +string serializar()
  +void deserializar(string data)
}

class Desarrollador {
  -int horasExtras
  -string lenguaje

  +double calcularSalario()
  +void mostrarDatos()
  +void ingresarDatos()
  +string serializar()
  +void deserializar(string data)
}

class Disenador {
  -string programa
  -int proyectos

  +double calcularSalario()
  +void mostrarDatos()
  +void ingresarDatos()
  +string serializar()
  +void deserializar(string data)
}

class Tester {
  -int bugs
  -string sistema

  +double calcularSalario()
  +void mostrarDatos()
  +void ingresarDatos()
  +string serializar()
  +void deserializar(string data)
}

Empleado <|-- Gerente
Empleado <|-- Desarrollador
Empleado <|-- Disenador
Empleado <|-- Tester

class GestorArchivos {
  +static void guardar(string archivo, vector<Empleado*> empleados)
  +static void cargar(string archivo, vector<Empleado*> empleados)
}

class Departamento {
  -vector<Empleado*> empleados
  -GestorArchivos manejadorArchivos

  +string getNombre()
  +void agregarEmpleado(Empleado* empleado)
  +void eliminarEmpleado(const string& nombre)
  +Empleado* buscarEmpleado(const string& nombre)
  +void listarEmpleados()
  +void guardar(string archivo)
  +void cargar(string archivo)
}

Departamento *-- GestorArchivos : composición
Departamento *-- Empleado : composición

class Empresa {
  -string nombre
  -set<Departamento<Empleado>*> departamentos

  +Empresa(string , vector<Departamento<Empleado>*> )
  +Empresa(string , Departamento<Empleado>* )
  +void agregarDepartamento(Departamento<Empleado>* departamento)
  +void eliminarDepartamento(string nombre)
  +void mostrarDepartamentos()
}

class Reportes {
  +static void generarReporte(Empresa<Departamento<Empleado>>& empresa)
  +static void mostrarSalarioTotal(const Empresa<Departamento<Empleado>>& empresa)
}

class Menu {
  -Empresa<Departamento<Empleado>> empresa

  +void mostrarMenuPrincipal()
  +void mostrarMenuDepartamentos()
  +void crearDepartamento()
  +static void crearEmpleado(Departamento<Empleado>* departamento)
  +void listarDepartamentos()
  +static void listarEmpleados(Departamento<Empleado>* departamento)
  +static void editarEmpleado(Departamento<Empleado>* departamento)
  +static void eliminarEmpleado(Departamento<Empleado>* departamento)
  +static void buscarEmpleado(Departamento<Empleado>* departamento)
  +void generarReporte()
}

Empresa *-- Departamento : composición
Menu --> Empresa : uso
Reportes --> Empresa : uso
@enduml
